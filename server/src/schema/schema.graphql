scalar DateTime

type User {
  id: ID!
  username: String!
  email: String!
  createdAt: DateTime!
  avatar: String
  articles: [Article!]!
  comments: [Comment!]!
  likes: [Like!]!
}

type Article {
  id: ID!
  title: String!
  content: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  author: User!
  comments: [Comment!]!
  likes: [Like!]!
  likesCount: Int!
}

type Comment {
  id: ID!
  content: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  author: User!
  article: Article!
}

type Like {
  id: ID!
  createdAt: DateTime!
  user: User!
  article: Article!
}

type AuthPayload {
  token: String!
  user: User!
}

input RegisterInput {
  username: String!
  email: String!
  password: String!
  avatar: String
}

input LoginInput {
  email: String!
  password: String!
}

input ArticleInput {
  title: String!
  content: String!
}

input ArticleUpdateInput {
  title: String
  content: String
}

input CommentInput {
  content: String!
  articleId: ID!
}

input UpdateProfileInput {
  username: String
  email: String
  currentPassword: String!
  newPassword: String
}

type Query {
  me: User
  user(username: String!): User
  users: [User!]!
  article(id: ID!): Article
  articles(offset: Int, limit: Int, authorId: ID, search: String, authorUsername: String): [Article!]!
  comments(articleId: ID!): [Comment!]!
}

type DeletedArticle {
  id: ID!
  title: String!
}

type Mutation {
  register(input: RegisterInput!): AuthPayload!
  login(input: LoginInput!): AuthPayload!
  
  updateProfile(input: UpdateProfileInput!): User!
  deleteAccount(password: String!): Boolean!
  
  createArticle(input: ArticleInput!): Article!
  updateArticle(id: ID!, input: ArticleUpdateInput!): Article!
  deleteArticle(id: ID!): DeletedArticle!
  
  addComment(input: CommentInput!): Comment!
  deleteComment(id: ID!): Boolean!
  
  toggleLike(articleId: ID!): Article!
} 